#!/bin/bash

# Script de Diagn√≥stico - ARP Manuten√ß√µes
# Use quando houver problemas de conex√£o

set -e

echo "üîç Diagn√≥stico do Sistema - ARP Manuten√ß√µes"
echo "=========================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Verificar Docker
log "1. Verificando Docker..."
if command -v docker &> /dev/null; then
    success "Docker est√° instalado"
    docker --version
else
    error "Docker n√£o est√° instalado!"
    exit 1
fi

if command -v docker-compose &> /dev/null; then
    success "Docker Compose est√° instalado"
    docker-compose --version
else
    error "Docker Compose n√£o est√° instalado!"
    exit 1
fi

# 2. Verificar arquivos necess√°rios
log "2. Verificando arquivos necess√°rios..."
if [ -f "docker-compose.yml" ]; then
    success "docker-compose.yml encontrado"
else
    error "docker-compose.yml n√£o encontrado!"
    exit 1
fi

if [ -f ".env" ]; then
    success ".env encontrado"
else
    warning ".env n√£o encontrado, copiando env.docker..."
    if [ -f "env.docker" ]; then
        cp env.docker .env
        success ".env criado a partir de env.docker"
    else
        error "env.docker n√£o encontrado!"
        exit 1
    fi
fi

# 3. Verificar status dos containers
log "3. Verificando status dos containers..."
echo ""
echo "=== STATUS DOS CONTAINERS ==="
docker-compose ps

echo ""
echo "=== CONTAINERS EM EXECU√á√ÉO ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# 4. Verificar portas
log "4. Verificando portas..."
echo ""
echo "=== PORTAS EM USO ==="
netstat -tulpn | grep -E ":(80|443|3000|8080)" || echo "Nenhuma porta relevante em uso"

# 5. Verificar logs da aplica√ß√£o
log "5. Verificando logs da aplica√ß√£o..."
echo ""
echo "=== √öLTIMOS LOGS DA APLICA√á√ÉO ==="
docker-compose logs --tail=20 app

# 6. Verificar logs do Traefik
log "6. Verificando logs do Traefik..."
echo ""
echo "=== √öLTIMOS LOGS DO TRAEFIK ==="
docker-compose logs --tail=10 traefik

# 7. Verificar recursos do sistema
log "7. Verificando recursos do sistema..."
echo ""
echo "=== RECURSOS DO SISTEMA ==="
echo "Mem√≥ria:"
free -h
echo ""
echo "Disco:"
df -h /
echo ""
echo "CPU:"
top -bn1 | grep "Cpu(s)" || echo "N√£o foi poss√≠vel verificar CPU"

# 8. Verificar conectividade
log "8. Testando conectividade..."
echo ""
echo "=== TESTES DE CONECTIVIDADE ==="

# Testar localhost:3000
if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
    success "Aplica√ß√£o responde em localhost:3000"
else
    error "Aplica√ß√£o N√ÉO responde em localhost:3000"
fi

# Testar localhost:80
if curl -f -s http://localhost:80 > /dev/null 2>&1; then
    success "Traefik responde em localhost:80"
else
    warning "Traefik N√ÉO responde em localhost:80"
fi

# Testar localhost:8080
if curl -f -s http://localhost:8080 > /dev/null 2>&1; then
    success "Dashboard Traefik responde em localhost:8080"
else
    warning "Dashboard Traefik N√ÉO responde em localhost:8080"
fi

# 9. Sugest√µes de corre√ß√£o
log "9. Sugest√µes de corre√ß√£o..."
echo ""
echo "=== SUGEST√ïES ==="

# Verificar se containers est√£o rodando
if ! docker-compose ps | grep -q "Up"; then
    echo "üîß Containers n√£o est√£o rodando:"
    echo "   docker-compose --profile production up --build -d"
fi

# Verificar se aplica√ß√£o est√° com erro
if docker-compose logs app | grep -qi "error\|failed\|exception"; then
    echo "üîß Aplica√ß√£o com erros:"
    echo "   docker-compose logs app"
    echo "   docker-compose restart app"
fi

# Verificar se Traefik est√° com erro
if docker-compose logs traefik | grep -qi "error\|failed\|exception"; then
    echo "üîß Traefik com erros:"
    echo "   docker-compose logs traefik"
    echo "   docker-compose restart traefik"
fi

# Verificar recursos
MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [ "$MEMORY_USAGE" -gt 80 ]; then
    echo "üîß Alta utiliza√ß√£o de mem√≥ria (${MEMORY_USAGE}%):"
    echo "   docker system prune -f"
    echo "   docker-compose restart"
fi

DISK_USAGE=$(df / | awk 'NR==2{printf "%.0f", $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    echo "üîß Alta utiliza√ß√£o de disco (${DISK_USAGE}%):"
    echo "   docker system prune -f"
    echo "   df -h"
fi

echo ""
echo "üéØ Diagn√≥stico conclu√≠do!"
echo "Use os comandos sugeridos acima para resolver os problemas encontrados."
