version: '3.8'

services:
  # Aplicação Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`arpmanutencoes.com`) || Host(`www.arpmanutencoes.com`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.routers.app-secure.rule=Host(`arpmanutencoes.com`) || Host(`www.arpmanutencoes.com`)"
      - "traefik.http.routers.app-secure.entrypoints=websecure"
      - "traefik.http.routers.app-secure.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      - "traefik.docker.network=app-network"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Traefik (proxy reverso)
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=contato@arpmanutencoes.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard do Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - app-network
    restart: unless-stopped

  # Nginx (opcional - para servir arquivos estáticos)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=false"  # Desabilitar Traefik para este serviço
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - nginx

  # Redis (opcional - para cache)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - cache

  # PostgreSQL (opcional - para banco de dados)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: arpmanutencoes
      POSTGRES_USER: arp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - database

networks:
  app-network:
    driver: bridge

volumes:
  letsencrypt:
  redis_data:
  postgres_data:
