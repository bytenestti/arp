#!/bin/bash

# Diagn√≥stico de Conectividade - ARP Manuten√ß√µes
# Diagnostica problemas de conectividade ap√≥s corre√ß√£o de rede

set -e

echo "üîç Diagn√≥stico de Conectividade - ARP Manuten√ß√µes"
echo "==============================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Verificar status dos containers
log "1. Verificando status dos containers..."
echo ""
echo "=== STATUS DOS CONTAINERS ==="
docker-compose ps

echo ""
echo "=== CONTAINERS EM EXECU√á√ÉO ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# 2. Verificar logs da aplica√ß√£o
log "2. Verificando logs da aplica√ß√£o..."
echo ""
echo "=== LOGS DA APLICA√á√ÉO (√∫ltimas 20 linhas) ==="
docker-compose logs --tail=20 app

# 3. Verificar logs do Traefik
log "3. Verificando logs do Traefik..."
echo ""
echo "=== LOGS DO TRAEFIK (√∫ltimas 20 linhas) ==="
docker-compose logs --tail=20 traefik

# 4. Verificar portas
log "4. Verificando portas..."
echo ""
echo "=== PORTAS EM USO ==="
netstat -tulpn | grep -E ":(80|443|3000|8080)" || echo "Nenhuma porta relevante em uso"

echo ""
echo "=== PORTAS DOS CONTAINERS ==="
docker port arp-app-1 2>/dev/null || echo "Container app n√£o tem portas expostas"
docker port arp-traefik-1 2>/dev/null || echo "Container traefik n√£o tem portas expostas"

# 5. Verificar conectividade interna
log "5. Verificando conectividade interna..."
echo ""
echo "=== TESTES DE CONECTIVIDADE INTERNA ==="

# Testar aplica√ß√£o diretamente no container
if docker-compose exec app curl -f -s http://localhost:3000 > /dev/null 2>&1; then
    success "Aplica√ß√£o responde dentro do container"
else
    error "Aplica√ß√£o N√ÉO responde dentro do container"
fi

# Testar Traefik diretamente no container
if docker-compose exec traefik curl -f -s http://localhost:80 > /dev/null 2>&1; then
    success "Traefik responde dentro do container"
else
    error "Traefik N√ÉO responde dentro do container"
fi

# 6. Verificar conectividade entre containers
log "6. Verificando conectividade entre containers..."
echo ""
echo "=== TESTES DE CONECTIVIDADE ENTRE CONTAINERS ==="

# Testar se Traefik consegue acessar a aplica√ß√£o
if docker-compose exec traefik curl -f -s http://arp-app-1:3000 > /dev/null 2>&1; then
    success "Traefik consegue acessar a aplica√ß√£o"
else
    error "Traefik N√ÉO consegue acessar a aplica√ß√£o"
fi

# 7. Verificar configura√ß√£o do Traefik
log "7. Verificando configura√ß√£o do Traefik..."
echo ""
echo "=== CONFIGURA√á√ÉO DO TRAEFIK ==="
docker-compose exec traefik cat /etc/traefik/traefik.yml 2>/dev/null || echo "Arquivo de configura√ß√£o n√£o encontrado"

# 8. Verificar labels dos containers
log "8. Verificando labels dos containers..."
echo ""
echo "=== LABELS DO CONTAINER APP ==="
docker inspect arp-app-1 | grep -A 20 '"Labels"' | grep -E '"traefik|"com.docker.compose'

# 9. Verificar redes
log "9. Verificando configura√ß√£o de rede..."
echo ""
echo "=== CONFIGURA√á√ÉO DE REDE ==="
docker network inspect arp_app-network | grep -A 10 '"Containers"'

# 10. Testar conectividade externa
log "10. Testando conectividade externa..."
echo ""
echo "=== TESTES DE CONECTIVIDADE EXTERNA ==="

# Testar localhost
for port in 3000 80 443 8080; do
    if curl -f -s http://localhost:$port > /dev/null 2>&1; then
        success "Porta $port responde em localhost"
    else
        warning "Porta $port N√ÉO responde em localhost"
    fi
done

# Testar IP da VPS
VPS_IP="177.153.51.81"
for port in 80 443 8080; do
    if curl -f -s http://$VPS_IP:$port > /dev/null 2>&1; then
        success "Porta $port responde no IP $VPS_IP"
    else
        warning "Porta $port N√ÉO responde no IP $VPS_IP"
    fi
done

# 11. Verificar firewall
log "11. Verificando firewall..."
echo ""
echo "=== STATUS DO FIREWALL ==="
ufw status 2>/dev/null || echo "UFW n√£o est√° instalado"

# 12. Sugest√µes de corre√ß√£o
log "12. Sugest√µes de corre√ß√£o..."
echo ""
echo "=== SUGEST√ïES ==="

# Verificar se containers est√£o rodando
if ! docker-compose ps | grep -q "Up"; then
    echo "üîß Containers n√£o est√£o rodando:"
    echo "   docker-compose --profile production up -d"
fi

# Verificar se aplica√ß√£o est√° com erro
if docker-compose logs app | grep -qi "error\|failed\|exception"; then
    echo "üîß Aplica√ß√£o com erros:"
    echo "   docker-compose logs app"
    echo "   docker-compose restart app"
fi

# Verificar se Traefik est√° com erro
if docker-compose logs traefik | grep -qi "error\|failed\|exception"; then
    echo "üîß Traefik com erros:"
    echo "   docker-compose logs traefik"
    echo "   docker-compose restart traefik"
fi

# Verificar se portas est√£o expostas
if ! netstat -tulpn | grep -q ":80\|:443\|:3000\|:8080"; then
    echo "üîß Portas n√£o est√£o expostas:"
    echo "   Verificar docker-compose.yml"
    echo "   docker-compose restart"
fi

echo ""
echo "üéØ Diagn√≥stico de conectividade conclu√≠do!"
echo "Use as sugest√µes acima para resolver os problemas encontrados."
