#!/bin/bash

# Script de Corre√ß√£o de Rede - ARP Manuten√ß√µes
# Corrige problemas de rede do Docker Compose

set -e

echo "üîß Corre√ß√£o de Rede - ARP Manuten√ß√µes"
echo "===================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Parar containers
log "1. Parando containers..."
docker-compose down
success "Containers parados"

# 2. Limpar redes antigas
log "2. Limpando redes antigas..."
docker network prune -f
success "Redes antigas removidas"

# 3. Verificar configura√ß√£o de rede
log "3. Verificando configura√ß√£o de rede..."
if grep -q "arp_app-network" docker-compose.yml; then
    success "Configura√ß√£o de rede j√° est√° correta"
else
    warning "Configura√ß√£o de rede precisa ser ajustada"
fi

# 4. Rebuild e restart
log "4. Fazendo rebuild e restart..."
docker-compose --profile production up --build -d
success "Containers reiniciados"

# 5. Aguardar inicializa√ß√£o
log "5. Aguardando inicializa√ß√£o..."
sleep 15

# 6. Verificar status
log "6. Verificando status..."
docker-compose ps

# 7. Verificar redes
log "7. Verificando redes..."
echo ""
echo "=== REDES DISPON√çVEIS ==="
docker network ls

echo ""
echo "=== DETALHES DA REDE ==="
docker network inspect arp_app-network 2>/dev/null || echo "Rede arp_app-network n√£o encontrada"

# 8. Verificar logs do Traefik
log "8. Verificando logs do Traefik..."
echo ""
echo "=== LOGS DO TRAEFIK (√∫ltimas 10 linhas) ==="
docker-compose logs --tail=10 traefik

# 9. Testar conectividade
log "9. Testando conectividade..."
echo ""
echo "=== TESTES DE CONECTIVIDADE ==="

# Testar localhost:3000
if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
    success "Aplica√ß√£o responde em localhost:3000"
else
    warning "Aplica√ß√£o n√£o responde em localhost:3000"
fi

# Testar localhost:80
if curl -f -s http://localhost:80 > /dev/null 2>&1; then
    success "Traefik responde em localhost:80"
else
    warning "Traefik n√£o responde em localhost:80"
fi

# Testar localhost:8080
if curl -f -s http://localhost:8080 > /dev/null 2>&1; then
    success "Dashboard Traefik responde em localhost:8080"
else
    warning "Dashboard Traefik n√£o responde em localhost:8080"
fi

# 10. Verificar se ainda h√° warnings de rede
log "10. Verificando warnings de rede..."
echo ""
echo "=== VERIFICA√á√ÉO DE WARNINGS ==="
if docker-compose logs traefik | grep -q "Could not find network"; then
    warning "Ainda h√° warnings de rede nos logs"
    echo "√öltimos logs do Traefik:"
    docker-compose logs --tail=20 traefik
else
    success "N√£o h√° warnings de rede nos logs"
fi

echo ""
echo "üîß Corre√ß√£o de rede conclu√≠da!"
echo "=============================="
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Verificar se n√£o h√° mais warnings nos logs"
echo "2. Testar conectividade externa"
echo "3. Configurar DNS se ainda n√£o foi feito"
echo ""
echo "üìä Comandos √∫teis:"
echo "- Ver logs: docker-compose logs -f traefik"
echo "- Ver redes: docker network ls"
echo "- Ver status: docker-compose ps"
echo "- Reiniciar: docker-compose restart"
